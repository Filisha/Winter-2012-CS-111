# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Cameron Solomon
Student ID: 603 809 897
Email: cameronjsolomon@ucla.edu

# Partner 2 (if you're working in a team)
Name: Ervin Sukardi
Student ID: 203 808 277
Email: emsukardi@gmail.com

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)

Our method for running peer downloads and uploads in parallel was to use fork()
to create new threads that would complete downloads and uploads for us.
Our version of osppeer has a single parent process create a new child process
for every download and upload instance. The child processes perform the download
or upload, and then exit, while the parent continues to spawn more download
and upload instances until the user interrupts it.

# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)

Filename Buffer
Found a buffer overrun bug where if a filename longer than FILENAMESIZ-1 would
overflow the filename buffer. Bug was fixed by using a strncpy instead of a
strcpy, restricting the filename length to FILENAMESIZ, and always adding
the null terminator at the end of the string for when the buffer is later 
read or copied.

# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)

1.  Block Peers from Downloading From Other Directories
When serving a peer, we first do a check on the filename the peer is requesting.
If the filename is too long (checked using strlen) or contains the '/' 
character (checked using a loop), we print a number of error statements, then
free that particular upload thread.

2.  Increase Robustness of the Task Buffer
The task buffer size TASKBUFSIZ is sometimes not large enough to accommodate
a large number of peers, causing us to prematurely disconnect from the tracker.
To fix this robustly, we would have to change how we read the buffer to only
read complete lines, not partial lines. We then have to rewrite the
read_tracker_response function to recognize near-full buffers, and inform
downloads to wait if the buffer is full.
This would require rewriting large sections of code. Instead we simply 
made the size of the task buffer 16 times larger, from 4096 to 65536.

3.  Prevent Peers from Sending Endless Data
To prevent a peer from just continuously sending data, we set an upper limit 
to how large of a file you can download. If a peer attempts to send more bytes
than MAXIMUM_FILE_SIZE, we stop downloading from that peer, and try downloading
from a different peer.
This limit is currently set to 2 GiB (2^31 bytes), since 32-bit file systems
already consider this to be the maximum file size. To test on a smaller
upper limit, simply change the value of MAXIMUM_FILE_SIZE to something
smaller, such as 1 MiB (2^20).

4.  Block Intentionally Slow Peers
Some of the bad peers on run-bad serve us data at very low speeds, typically
at 4 bytes/read.
To block peers who are serving us data at extremely low speeds, we set a 
minimum transfer speed for peers who are serving us, as well as a number of
samples to determine this transfer speed. Peers who do not meet this minimum
requirement after a certain number of reads are rejected, and we try 
downloading the file with a different peer.
This means that we also may reject slow peers who upload below our minimum
rate, but are not intentionally bad.
The constants used are:
 - MINIMUM_TRANSFER_RATE	minimum bytes/read required
 - SPEED_SAMPLE_SIZE		# of samples to determine transfer rate

5.  Verify File Integrity
(This particular task is extra credit, and has not been implemented)

# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)

Download attacks:  
Get the list of peers serving cat1.jpg and attempt to attack each of them.
First try to attack them by buffer overflow.  Send them a GET request with a 
filename nearly 4 times filename buffer size, not null ended.  When the peer 
attempts to strcpy the name they will cause segfaults if they have not 
properly checked the filename is too long.  If we crafted it even better, it
might be possible to attack by putting some attack code into the overflow.
Attempt to grab the osppeer.c code itself by attempting a GET ../osppeer.c
this is merely a violation of security, we can now see how their peer runs.  The
info is great for planning some future attacks on them and exploiting bugs in
their code.
Next attempt to clog them up by starting a lot of socket connections and
requesting a valid file.  The peer may fill up their buffer or spend a lot of
effort servicing these requests while we don't even look at the data they give
us.

Upload attack: 
When a peer connects, give them an unlimited data stream simply continue sending 
trash data to the peer without stopping.  The peer may have no way of knowing 
whether this is the valid file, and if it doesn't stop us from sending data, 
it's harddisk could fill up with useless data.


# Extra credit problems
#Extra credit problem: none

# Add any other information you'd like us to know below this line.

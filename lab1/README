Group, Discussion, and ID Numbers
 - Cameron Solomon	1B 603 809 897
 - Ervin Sukardi	1A 203 808 277

////////////////////////////////////////////////////////////////////////////////
// Lab 1, Part C
////////////////////////////////////////////////////////////////////////////////

No known limitations outside of those imposed by the specification and the
relaxations allowed by the TAs on Piazza.

More specifically, our program is limited only by the relaxations which still
give us full credit:

 1.  Our program reads the entire script file, generates a dependency graph,
     and then begins execution, without breaking the behavior for lab 1a

 2.  While there may be cases where correct performance may occur anyways, we 
     assumed that any particular file is only ever written to once.

 3.  Our program only builds dependencies based on top level commands; 
     therefore, dependencies are only created between entire top level commands,
     without accounting for smaller dependencies between subcommands in a
     top level command.

 4.  Our program only builds dependencies based on top level commands; 
     therefore, within a particular top level command, all of the subcommands
     are executed sequentially

////////////////////////////////////////////////////////////////////////////////
// Lab 1, Part B
////////////////////////////////////////////////////////////////////////////////

No known limitations outside of those imposed by the specification.

////////////////////////////////////////////////////////////////////////////////
// Lab 1, Part A
////////////////////////////////////////////////////////////////////////////////

Rather than storing the command stream data from the file stream into a char 
buffer, the command stream stored the file stream, along with a method for 
retrieving the next byte from the file stream, allowing us to use a smaller 
character buffer that exclusively stored retrieved, but unused characters.

The command stream also kept track of the current and next tokens parsed from
the file stream. Therefore, retrieving a token would also result in constructing
the next available token.

A token is retrieved by attempting to read characters from the file stream 
until a complete token is formed. Token information is stored using an enum and 
a dynamically allocated character array, whose size is grown as needed.

A starting token from the file stream is then used to construct commands, 
starting by checking for and_or commands. It then continues to retrieve tokens
until a complete command is able to be formed.
A general command may be formed out of simple commands and special tokens, and
are organized in a binary tree-like structure. Commands are parsed so that
interpreting the command is left-associative.

e.g. a || ( b && c || d )

	        ||
	       /  \
	      a    ||
		  /  \
	        &&     d
	       /  \
	     b      c

In the case of an error, such as incorrect syntax, the program aborts, and 
provides an error message and a line number to the location of the error